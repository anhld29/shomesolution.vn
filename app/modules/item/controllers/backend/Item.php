<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Item extends MY_Controller {	public $module;	function __construct() {		parent::__construct();		if(!isset($this->auth) || is_array($this->auth) == FALSE || count($this->auth) == 0 ) redirect(BACKEND_DIRECTORY);		$this->load->library(array('configbie'));		$this->load->library('nestedsetbie', array('table' => 'item_catalogue'));		$this->module = 'item';	}		public function view($page = 1){		$this->commonbie->permission("item/backend/item/view", $this->auth['permission']);		$page = (int)$page;		$data['from'] = 0;		$data['to'] = 0;				$extend = (!in_array('item/backend/item/viewall', json_decode($this->auth['permission'], TRUE))) ? 'userid_created = '.$this->auth['id'].'' : '';						$perpage = ($this->input->get('perpage')) ? $this->input->get('perpage') : 20;		$keyword = $this->db->escape_like_str($this->input->get('keyword'));		$catalogueid = (int)$this->input->get('cataloguesid');		if($catalogueid > 0){			$config['total_rows'] = $this->Autoload_Model->_condition(array(				'module' => 'item',				'select' => '`object`.`id`',				'where' => ((!empty($extend)) ? '`object`.`userid_created` = '.$this->auth['id'].' ' : '' ),				'keyword' => '(`object`.`title` LIKE \'%'.$keyword.'%\')',				'catalogueid' => $catalogueid,				'count' => TRUE			));		}else{			$config['total_rows'] = $this->Autoload_Model->_get_where(array(				'select' => 'id',				'table' => 'item',				'where_extend' => $extend,				'keyword' => '(title LIKE \'%'.$keyword.'%\' )',				'count' => TRUE,			));		}				if($config['total_rows'] > 0){			$this->load->library('pagination');			$config['base_url'] = base_url('item/backend/item/view');			$config['suffix'] = $this->config->item('url_suffix').(!empty($_SERVER['QUERY_STRING'])?('?'.$_SERVER['QUERY_STRING']):'');			$config['first_url'] = $config['base_url'].$config['suffix'];			$config['per_page'] = $perpage;			$config['uri_segment'] = 5;			$config['use_page_numbers'] = TRUE;			$config['full_tag_open'] = '<ul class="pagination no-margin">';			$config['full_tag_close'] = '</ul>';			$config['first_tag_open'] = '<li>';			$config['first_tag_close'] = '</li>';			$config['last_tag_open'] = '<li>';			$config['last_tag_close'] = '</li>';			$config['cur_tag_open'] = '<li class="active"><a class="btn-primary">';			$config['cur_tag_close'] = '</a></li>';			$config['next_tag_open'] = '<li>';			$config['next_tag_close'] = '</li>';			$config['prev_tag_open'] = '<li>';			$config['prev_tag_close'] = '</li>';			$config['num_tag_open'] = '<li>';			$config['num_tag_close'] = '</li>';			$this->pagination->initialize($config);			$data['PaginationList'] = $this->pagination->create_links();			$totalPage = ceil($config['total_rows']/$config['per_page']);			$page = ($page <= 0)?1:$page;			$page = ($page > $totalPage)?$totalPage:$page;			$page = $page - 1;			$data['from'] = ($page * $config['per_page']) + 1;			$data['to'] = ($config['per_page']*($page+1) > $config['total_rows']) ? $config['total_rows']  : $config['per_page']*($page+1);			if($catalogueid > 0){				$data['listitem'] = $this->Autoload_Model->_condition(array(					'module' => 'item',					'select' => '`object`.`*`, (SELECT fullname FROM user WHERE user.id = object.userid_created) as user_created, (SELECT title FROM item_catalogue WHERE item_catalogue.id = object.catalogueid) as catalogue_title',					'where' => ((!empty($extend)) ? '`object`.`userid_created` = '.$this->auth['id'].'' : '' ),					'keyword' => '(`object`.`title` LIKE \'%'.$keyword.'%\' )',					'catalogueid' => $catalogueid,					'limit' => $perpage,					'order_by' => '`object`.`created` desc',				));			}else{				$data['listitem'] = $this->Autoload_Model->_get_where(array(					'select' => '*, (SELECT fullname FROM user WHERE user.id = item.userid_created) as user_created, (SELECT title FROM item_catalogue WHERE item_catalogue.id = item.catalogueid) as catalogue_title ',					'table' => 'item',					'where_extend' => $extend,					'limit' => $config['per_page'],					'start' => $page * $config['per_page'],					'keyword' => '(title LIKE \'%'.$keyword.'%\')',					'order_by' => 'created desc',				), TRUE);				}		}		$data['script'] = 'item';		$data['config'] = $config;		$data['template'] = 'item/backend/item/view';		$this->load->view('dashboard/backend/layout/dashboard', isset($data)?$data:NULL);	}		public function Create(){		$this->commonbie->permission("item/backend/item/create", $this->auth['permission']);		if($this->input->post('create')){			$this->load->library('form_validation');			$this->form_validation->CI =& $this;			$this->form_validation->set_error_delimiters('','/');			$this->form_validation->set_rules('title', 'Tiêu đề bài viết', 'trim|required');			$this->form_validation->set_rules('catalogueid', 'Danh mục chính', 'trim|is_natural_no_zero');			$this->form_validation->set_rules('tuoi', 'Năm sinh', 'trim|required');//			$this->form_validation->set_rules('canonical', 'Đường dẫn bài viết', 'trim|required|callback__CheckCanonical');			if($this->form_validation->run($this)){				$image = $this->input->post('image');				$_insert = array(					'title' => htmlspecialchars_decode(html_entity_decode($this->input->post('title'))),					'slug' => slug(htmlspecialchars_decode(html_entity_decode($this->input->post('title')))),					'canonical' => slug($this->input->post('canonical')),					'catalogueid' => $this->input->post('catalogueid'),					'catalogue' => json_encode($this->input->post('catalogue')),					'meta_title' => $this->input->post('meta_title'),					'meta_description' => $this->input->post('meta_description'),					'publish' => $this->input->post('publish'),					'tuoi' => $this->input->post('tuoi'),					'namdukien' => $this->input->post('namdukien'),					'description' => $this->input->post('description'),					'gioitinh' => $this->input->post('gioitinh'),					'huongnha' => $this->input->post('huongnha'),					'image' => $image,                    'userid_created' => $this->auth['id'],					'created' => gmdate('Y-m-d H:i:s', time() + 7*3600),				);													$resultid = $this->Autoload_Model->_create(array(					'table' => 'item',					'data' => $_insert,				));				if($resultid > 0){					/*					$canonical = slug($this->input->post('canonical'));					if(!empty($canonical)){						$router = array(							'canonical' => $canonical,							'crc32' => sprintf("%u", crc32($canonical)),							'uri' => 'item/frontend/item/view',							'param' => $resultid,							'type' => 'number',							'created' => gmdate('Y-m-d H:i:s', time() + 7*3600),						);						$routerid = $this->Autoload_Model->_create(array(							'table' => 'router',							'data' => $router,						));					}					*/					$catalogue = $this->input->post('catalogue');					$_catalogue_relation_ship[] = array(						'module' => 'item',						'moduleid' => $resultid,						'catalogueid' => $this->input->post('catalogueid'),					);					if(isset($catalogue) && is_array($catalogue) && count($catalogue)){						foreach($catalogue as $key => $val){							if($val == $this->input->post('catalogueid')) continue;							$_catalogue_relation_ship[] = array(								'module' => 'item',								'moduleid' => $resultid,								'catalogueid' => $val							);						}					}										$this->Autoload_Model->_create_batch(array(						'table' => 'catalogue_relationship',						'data' => $_catalogue_relation_ship,					));															$this->session->set_flashdata('message-success', 'Thêm bài viết mới thành công');					redirect('item/backend/item/view');				}			}		}		$data['script'] = 'item';		$data['template'] = 'item/backend/item/create';		$this->load->view('dashboard/backend/layout/dashboard', isset($data)?$data:NULL);	}		public function Update($id = 0){		$data = comment(array('id' => $id, 'module' => $this->module));								$this->commonbie->permission("item/backend/item/update", $this->auth['permission']);		$id = (int)$id;		$detailitem = $this->Autoload_Model->_get_where(array(			'select' => '*',			'table' => 'item',			'where' => array('id' => $id),		));		if(!isset($detailitem) || is_array($detailitem) == false || count($detailitem) == 0){			$this->session->set_flashdata('message-danger', 'bài viết không tồn tại');			redirect('item/backend/item/view');		}		if($this->input->post('update')){			$this->load->library('form_validation');			$this->form_validation->CI =& $this;			$this->form_validation->set_error_delimiters('','/');			$this->form_validation->set_rules('title', 'Tiêu đề bài viết', 'trim|required');			$this->form_validation->set_rules('canonical', 'Đường dẫn bài viết', 'trim|required|callback__CheckCanonical');			if($this->form_validation->run($this)){				$_update = array(					'title' => htmlspecialchars_decode(html_entity_decode($this->input->post('title'))),					'slug' => slug(htmlspecialchars_decode(html_entity_decode($this->input->post('title')))),					'canonical' => slug($this->input->post('canonical')),					'catalogueid' => $this->input->post('catalogueid'),					'catalogue' => json_encode($this->input->post('catalogue')),					'meta_title' => $this->input->post('meta_title'),					'meta_description' => $this->input->post('meta_description'),					'publish' => $this->input->post('publish'),					'image' => $this->input->post('image'),					'tuoi' => $this->input->post('tuoi'),					'namdukien' => $this->input->post('namdukien'),					'description' => $this->input->post('description'),					'gioitinh' => $this->input->post('gioitinh'),					'huongnha' => $this->input->post('huongnha'),					'userid_updated' => $this->auth['id'],					'updated' => gmdate('Y-m-d H:i:s', time() + 7*3600),				);				$flag = $this->Autoload_Model->_update(array(					'where' => array('id' => $id),					'table' => 'item',					'data' => $_update,				));				if($flag > 0){					/*					$canonical = slug($this->input->post('canonical'));					if(!empty($canonical)){						$this->Autoload_Model->_delete(array(							'where' => array('canonical' => $detailitem['canonical'],'uri' => 'item/frontend/item/view','param' => $id),							'table' => 'router',						));						$router = array(							'canonical' => $canonical,							'crc32' => sprintf("%u", crc32($canonical)),							'uri' => 'item/frontend/item/view',							'param' => $id,							'type' => 'number',							'created' => gmdate('Y-m-d H:i:s', time() + 7*3600),						);						$routerid = $this->Autoload_Model->_create(array(							'table' => 'router',							'data' => $router,						));					}					*/										$this->Autoload_Model->_delete(array(						'where' => array('module' => 'item','moduleid' => $id),						'table' => 'catalogue_relationship',					));										$catalogue = $this->input->post('catalogue');					$_catalogue_relation_ship[] = array(						'module' => 'item',						'moduleid' => $id,						'catalogueid' => $this->input->post('catalogueid'),					);					if(isset($catalogue) && is_array($catalogue) && count($catalogue)){						foreach($catalogue as $key => $val){							if($val == $this->input->post('catalogueid')) continue;							$_catalogue_relation_ship[] = array(								'module' => 'item',								'moduleid' => $id,								'catalogueid' => $val							);						}					}					$this->Autoload_Model->_create_batch(array(						'table' => 'catalogue_relationship',						'data' => $_catalogue_relation_ship,					));																				$this->session->set_flashdata('message-success', 'Cập nhật bài viết thành công');					redirect('item/backend/item/view');				}			}		}						$data['script'] = 'item';		$data['detailitem'] = $detailitem;		$data['template'] = 'item/backend/item/update';		$this->load->view('dashboard/backend/layout/dashboard', isset($data)?$data:NULL);	}		public function duplicate($id = 0){		$page = ($this->input->get('page')) ? $this->input->get('page') : 1;		$this->commonbie->permission("item/backend/item/duplicate", $this->auth['permission']);				$id = (int)$id;		$detailitem = $this->Autoload_Model->_get_where(array(			'select' => '*',			'table' => 'item',			'where' => array('id' => $id),		));		if(!isset($detailitem) || is_array($detailitem) == false || count($detailitem) == 0){			$this->session->set_flashdata('message-danger', 'Bài viết không tồn tại');			redirect('item/backend/item/view');		}		$detailitem['title'] = str_duplicate(array('value' => $detailitem['title']));		$detailitem['canonical'] = str_duplicate(array('value' => $detailitem['canonical'], 'field' => 'canonical'));		$data['detailitem'] = $detailitem;				//Kiểm tra xem sản phẩm có nằm trong chương trình khuyến mại nào không		$current = gmdate('Y-m-d H:i:s', time() + 7*3600);		if($this->input->post('create')){			$album = $this->input->post('album');			$this->load->library('form_validation');			$this->form_validation->CI =& $this;			$this->form_validation->set_error_delimiters('','/');			$this->form_validation->set_rules('title', 'Tiêu đề bài viết', 'trim|required');			$this->form_validation->set_rules('catalogueid', 'Danh mục chính', 'trim|is_natural_no_zero');			$this->form_validation->set_rules('canonical', 'Đường dẫn bài viết', 'trim|required|callback__CheckCanonical');						if($this->form_validation->run($this)){				$_insert = array(					'title' => htmlspecialchars_decode(html_entity_decode($this->input->post('title'))),					'slug' => slug(htmlspecialchars_decode(html_entity_decode($this->input->post('title')))),					'canonical' => slug($this->input->post('canonical')),					'catalogueid' => $this->input->post('catalogueid'),					'catalogue' => json_encode($this->input->post('catalogue')),					'meta_title' => $this->input->post('meta_title'),					'meta_description' => $this->input->post('meta_description'),					'publish' => $this->input->post('publish'),					'image' => $this->input->post('image'),					'tuoi' => $this->input->post('tuoi'),					'namdukien' => $this->input->post('namdukien'),					'description' => $this->input->post('description'),					'gioitinh' => $this->input->post('gioitinh'),					'huongnha' => $this->input->post('huongnha'),					'userid_created' => $this->auth['id'],					'created' => gmdate('Y-m-d H:i:s', time() + 7*3600),				);				$resultid = $this->Autoload_Model->_create(array(					'table' => 'item',					'data' => $_insert,				));				if($resultid > 0){					/*					$canonical = slug($this->input->post('canonical'));					if(!empty($canonical)){						$router = array(							'canonical' => $canonical,							'crc32' => sprintf("%u", crc32($canonical)),							'uri' => 'item/frontend/item/view',							'param' => $resultid,							'type' => 'number',							'created' => gmdate('Y-m-d H:i:s', time() + 7*3600),						);						$routerid = $this->Autoload_Model->_create(array(							'table' => 'router',							'data' => $router,						));					}*/					$catalogue = $this->input->post('catalogue');					$_catalogue_relation_ship[] = array(						'module' => 'item',						'moduleid' => $resultid,						'catalogueid' => $this->input->post('catalogueid'),					);					if(isset($catalogue) && is_array($catalogue) && count($catalogue)){						foreach($catalogue as $key => $val){							if($val == $this->input->post('catalogueid')) continue;							$_catalogue_relation_ship[] = array(								'module' => 'item',								'moduleid' => $resultid,								'catalogueid' => $val							);						}					}										$this->Autoload_Model->_create_batch(array(						'table' => 'catalogue_relationship',						'data' => $_catalogue_relation_ship,					));															$this->session->set_flashdata('message-success', 'Thêm bài viết mới thành công');					redirect('item/backend/item/view');				}			}		}		$data['script'] = 'item';		$data['template'] = 'item/backend/item/duplicate';		$this->load->view('dashboard/backend/layout/dashboard', isset($data)?$data:NULL);	}	public function _CheckCanonical($canonical = ''){				$originalCanonical = $this->input->post('original_canonical');		if($canonical != $originalCanonical){			$crc32 = sprintf("%u", crc32(slug($canonical)));			$router = $this->Autoload_Model->_get_where(array(				'select' => 'id',				'table' => 'router',				'where' => array('crc32' => $crc32),				'count' => TRUE			));			if($router > 0){				$this->form_validation->set_message('_CheckCanonical','Đường dẫn đã tồn tại, hãy chọn một đường dẫn khác');				return false;			}		}		return true;	}		}